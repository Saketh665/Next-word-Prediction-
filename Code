# Install necessary libraries
!pip install tensorflow
!pip install keras

# Import libraries
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.optimizers import Adam

# Sample training data (for simplicity, we use a small dataset)
# You can replace this with a larger text corpus
data = """I love machine learning. I enjoy solving problems with deep learning. 
I find natural language processing fascinating. Neural networks are powerful tools."""

# Tokenization and creating sequences
tokenizer = Tokenizer()
tokenizer.fit_on_texts([data])

# Convert text to sequences of numbers
total_words = len(tokenizer.word_index) + 1
input_sequences = []
for line in data.split("."):
    token_list = tokenizer.texts_to_sequences([line])[0]
    for i in range(1, len(token_list)):
        n_gram_sequence = token_list[:i+1]
        input_sequences.append(n_gram_sequence)

# Pad sequences to ensure uniform input shape
max_sequence_len = max([len(x) for x in input_sequences])
input_sequences = np.array(pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre'))

# Create predictors and label
X, labels = input_sequences[:,:-1], input_sequences[:,-1]
y = tf.keras.utils.to_categorical(labels, num_classes=total_words)

# Build LSTM Model
model = Sequential()
model.add(Embedding(total_words, 100, input_length=max_sequence_len-1))  # Embedding layer
model.add(LSTM(150))  # LSTM layer
model.add(Dropout(0.2))  # Regularization with Dropout
model.add(Dense(total_words, activation='softmax'))  # Output layer

# Compile the model
adam = Adam(learning_rate=0.01)
model.compile(loss='categorical_crossentropy', optimizer=adam, metrics=['accuracy'])

# View the model summary
model.summary()

# Train the model
history = model.fit(X, y, epochs=100, verbose=1)

# Function to predict the next word
def predict_next_word(seed_text, num_words, max_sequence_len):
    for _ in range(num_words):
        token_list = tokenizer.texts_to_sequences([seed_text])[0]
        token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')
        predicted = np.argmax(model.predict(token_list), axis=-1)
        
        output_word = ""
        for word, index in tokenizer.word_index.items():
            if index == predicted:
                output_word = word
                break
        seed_text += " " + output_word
    return seed_text

# Test the model for next word prediction
seed_text = "I enjoy solving"
next_words = 3
print(predict_next_word(seed_text, next_words, max_sequence_len))
